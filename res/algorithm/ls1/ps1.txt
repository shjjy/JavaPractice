https://ocw.mit.edu/courses/6-046j-introduction-to-algorithms-sma-5503-fall-2005/resources/ps1/

1.Big-O   O(g(n))={f(n):there are constants c>0, n0>0 such that 0≤f(n)≤c⋅g(n) for all n≥n0} (Upper Bound)
2.Omega   Ω(g(n))={f(n):there exist constants c>0, n0>0 such that 0≤c⋅g(n)≤f(n) for all n≥n0}
3.Theta   Θ(g(n))={f(n):there exist positive constants c1 ,c2, and n0 such that 0≤c1 ⋅g(n)≤f(n)≤c2 ⋅g(n) for all n≥n0}
          Θ(g(n)) = O(g(n)) ∩ Ω(g(n))
4.Small-O o(g(n))={f(n):∀c>0,∃n0>0 such that f(n)<c⋅g(n) for all n≥n0} ∀ 所有, ∃ 存在

主定理：https://zh.wikipedia.org/zh-tw/%E4%B8%BB%E5%AE%9A%E7%90%86

Problem 1-1. Asymptotic Notation

a)Sometimes True => f(n) = n 成立，f(n) = 1/n 就不成立
b)Always True => max(f(n), g(n)) <= f(n) + g(n) <= 2 max(f(n), g(n))
c)Always True => O(f(n)) = g(n) , f(n) + O(f(n)) = f(n) + g(n)
    0 <= g(n) <= C*f(n)
    f(n) <= f(n) + g(n) <= 1*f(n) + C*f(n)
    f(n) <= f(n) + g(n) <= (1+C) * (f(n)
d)Never True =>
    f(n) = Ω(g(n)) -> c⋅g(n)≤f(n)
    f(n) = o(g(n)) -> f(n)<c⋅g(n)
    不可能存在 f(n)<c⋅g(n)≤f(n)
e)Sometimes True
    f(n) = n, g(n) = n^2, O(f(n)) = n, O(g(n)) = n^2
    -> f(n) =/= O(g(n)) and g(n) =/= O(f(n))
    f(n) = g(n) = 1
    -> f(n) = O(g(n)), g(n) = O(f(n))


Problem 1-2. Recurrences
Master theorem
a) n lg n
b) n^log5(3)
c) 2^n
d) (lg lg n)^2
e) n^log3(10)
f) n^3
g) lg n
h) n lg n
j) n lg lg n


Problem 1-3. Unimodal Search
a) algorithm.ls1.Unimodal
b, c) 用 a 去 loop x, y 即可